import numpy as np

class LinearRegression:
    def _init_(self, learning_rate=0.001, num_iterations=1000):
        self.learning_rate = learning_rate
        self.num_iterations = num_iterations
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        num_samples, num_features = X.shape
        self.weights = np.zeros(num_features)
        self.bias = 0

        for _ in range(self.num_iterations):
            y_predicted = np.dot(X, self.weights) + self.bias
            dw = (1 / num_samples) * np.dot(X.T, (y_predicted - y))
            db = (1 / num_samples) * np.sum(y_predicted - y)
            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db

    def predict(self, X):
        y_approximated = np.dot(X, self.weights) + self.bias
        return y_approximated

# Example usage
if _name_ == "_main_":
    X = np.array([1, 2, 3, 4, 5]).reshape((-1, 1))
    y = np.array([2, 3, 5, 7, 11])
    model = LinearRegression()
    model.fit(X, y)
    predicted = model.predict(X)
    print("Predicted values:", predicted)